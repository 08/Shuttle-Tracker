# Shuttle Tracker
A suite of applications to make college campus transportation more useful.

## About
The Shuttle Tracker project is intended to be a mobile equivalent of the RPI Shuttle Tracker website at `http://shuttles.rpi.edu/`.  The purpose is to provide information on the RPI campus shuttles, including their current locations and when they will arrive at each stop.

It consists of several parts: 

1. A program meant to run on a server, fetching data from the Shuttle Tracker website and calculating Estimated Times of Arrival (ETAs) for the shuttles.

2. A web server which serves data to the mobile clients, and displays these ETAs on a mobile-friendly website, meant to run on the same server as 1.

3. Android and iOS applications, which display recent shuttle positions, the normal shuttle routes and the stops on these routes.  These applications also display ETAs.  The applications poll 2 for shuttle position and ETA information.

Both 1 and 2 are found in the `server/` directory.  The Android and iOS programs are found in the `android/` and `ios/` directories, respectively.

## Server
Note: Certain values have been hard-coded into certain java files, such as the link to the shuttle data in JSONExtractor.java, while other values are being read in from the sts.properties file, which is designed to hold information to connect to the database.

###Compiling
Import the contents of Shuttle-Tracker/server to your preferred Java IDE (e.g. NetBeans or Eclipse). If you choose to use Eclipse, then just use the project file located in Shuttle-Tracker/server. The shuttle data processing code is contained within the src folder and most of the website code is contained under WebContent.

###Execution
To run the Java program, several pieces of information are required:

1. The http link to the shuttle data (located in JSONExtractor.java as shuttleURL)

2. The http link to the route and stop data (located in JSONExtractor.java as routeURL)

3. A file called sts.properties, which should contain the link* to your MySQL database as well as the username and password to access that database (in that order). This file should be located in the working directory of the project, or where ever you choose to place the runnable executable. It should be noted that JSONSender,java, which gets the data from this file will, by default, look for the file in the current working directory.

After inputting this information, run the main method located in ShuttleTrackerServer.java. When creating the java runnable file, make sure to package all of the used libraries with the project.
*This link would look as follows: `jdbc:mysql://PortName/DatabaseName`, where DatabaseName is the name of the DB you want to write to and PortName is the port you are connecting to. If the database is located locally on your machine, then replace PortName with localhost.

## Android
Information coming soon.

## iOS (iPhone/iPod Touch/iPad)
Note: The iOS application's first general release on the official iOS App Store is planned to be around 3/26/11.

### Compiling
Open `ios/Shuttle-Tracker.xcodeproj` in XCode and compile normally.

### Installing
Note: You must be a registered and paying iOS developer to install this way.
With the project open in XCode, set up code signing as instructed at the iOS provisioning center, `https://developer.apple.com/ios/manage/overview/index.action`

Connect your provisioned device and set XCode's target to your device name.  Compile and run the program, using Run or Build and Go.

### Contact
If you need help compiling or otherwise need to get in touch, brendonjustin can be found on `#rcos` on `irc.freenode.net` as bjustin

